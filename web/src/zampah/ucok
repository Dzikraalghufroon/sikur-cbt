import React, { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import axios from 'axios';
import Styles from './Ujian.module.css';
import Navbar from '../../komponen/Navbar/navbar';
import Footer from '../../komponen/footer/footer';
import ConfirmModal from '../../komponen/popup/ConfirmModal';
import Modal from '../../komponen/popup/modal';

const UjianPage = () => {
  const [soal, setSoal] = useState([]);
  const [selectedJawaban, setSelectedJawaban] = useState({});
  const [currentSoalIndex, setCurrentSoalIndex] = useState(0);
  const [showConfirmModal, setShowConfirmModal] = useState(false);
  const [showModal, setShowModal] = useState(false);
  const [opsiterisi, setOpsiterisi] = useState([]);
  const [nomorterisi, setNomorterisi] = useState([]);
  const { id } = useParams();
  const navigate = useNavigate();

  useEffect(() => {
    setShowModal(true);
  }, []);

  const toggleModal = () => {
    setShowModal(!showModal);
  };

  useEffect(() => {
    const fetchSoal = async () => {
      try {
        const response = await axios.get(`${import.meta.env.VITE_SERVER}/read_ujian_user/${id}`, { withCredentials: true });
        setSoal(response.data || []);
      } catch (error) {
        console.error('Error fetching soal data:', error);
        setSoal([]); // Inisialisasi dengan array kosong jika terjadi error
      }
    };
    fetchSoal();
  }, [id]);

  useEffect(() => {
    const fetchOpsiterisi = async () => {
      if (soal.length > 0) {
        const currentSoalId = soal[currentSoalIndex]?.id;
        if (currentSoalId) {
          try {
            const opsiterisiResponse = await axios.get(`${import.meta.env.VITE_SERVER}/read_jawaban_pilihan_user/${currentSoalId}`, { withCredentials: true });
            setOpsiterisi(opsiterisiResponse.data || []);
          } catch (error) {
            console.error('Error fetching opsiterisi data:', error);
            setOpsiterisi([]); // Inisialisasi dengan array kosong jika terjadi error
          }
        }
      }
    };
    fetchOpsiterisi();
  }, [currentSoalIndex, soal]);

  useEffect(() => {
    const fetchNomorTerisi = async () => {
      try {
        const response = await axios.get(`${import.meta.env.VITE_SERVER}/read_nomor_terisi_user/${id}`, { withCredentials: true });
        setNomorterisi(response.data || []);
      } catch (error) {
        console.error('Error fetching nomor terisi data:', error);
        setNomorterisi([]); // Inisialisasi dengan array kosong jika terjadi error
      }
    };
    fetchNomorTerisi();
  }, [id]);

  const handleJawabanChange = (soalId, jawaban) => {
    setSelectedJawaban(prev => ({
      ...prev,
      [soalId]: jawaban
    }));
  };

  const handleSubmit = async (direction) => {
    try {
      const currentSoalId = soal[currentSoalIndex]?.id;
      if (currentSoalId) {
        const jawabanToSend = { [currentSoalId]: selectedJawaban[currentSoalId] };
        await axios.post(`${import.meta.env.VITE_SERVER}/jawaban_user/${id}`, jawabanToSend, { withCredentials: true });

        if (direction === 'prev') {
          setCurrentSoalIndex(prevIndex => Math.max(prevIndex - 1, 0));
        } else if (direction === 'next') {
          setCurrentSoalIndex(prevIndex => Math.min(prevIndex + 1, soal.length - 1));
        }
      }
    } catch (error) {
      console.error('Error submitting answer:', error);
    }
  };

  const submitJawaban = () => {
    setShowConfirmModal(true);
  };

  const handleConfirm = async () => {
    setShowConfirmModal(false);
    try {
      const currentSoalId = soal[currentSoalIndex]?.id;
      if (currentSoalId) {
        const jawabanToSend = { [currentSoalId]: selectedJawaban[currentSoalId] };
        await axios.post(`${import.meta.env.VITE_SERVER}/jawaban_user/${id}`, jawabanToSend, { withCredentials: true });
        alert('Jawaban berhasil dikirim!');
        navigate('/user-dashboard');
      }
    } catch (error) {
      console.error('Error sending answers:', error);
      alert('Terjadi kesalahan saat mengirim jawaban.');
    }
  };

  const handleCancel = () => {
    setShowConfirmModal(false);
  };

  const isSelected = (jawaban) => {
    return opsiterisi.some(op => op.jawaban === jawaban);
  };

  const isterjawab = (id_soal) => {
    return nomorterisi.some(op => op.id_soal === id_soal);
  };

  const currentSoal = soal[currentSoalIndex] || {};

  useEffect(() => {
    const handleVisibilityChange = () => {
      if (document.visibilityState === 'visible') {
        console.log("Halaman sedang dilihat oleh pengguna.");
      } else {
        console.log("Halaman tidak sedang dilihat oleh pengguna.");
      }
    };

    const handleBeforeUnload = (e) => {
      const confirmationMessage = 'asu?';
      e.returnValue = confirmationMessage;
      return confirmationMessage;
    };

    document.addEventListener('visibilitychange', handleVisibilityChange);
    window.addEventListener('beforeunload', handleBeforeUnload);

    return () => {
      document.removeEventListener('visibilitychange', handleVisibilityChange);
      window.removeEventListener('beforeunload', handleBeforeUnload);
    };
  }, [navigate]);

  const handlenomor = async (index) => {
    try {
      const currentSoalId = soal[currentSoalIndex]?.id;
      if (currentSoalId) {
        const jawabanToSend = { [currentSoalId]: selectedJawaban[currentSoalId] };

        if (Object.keys(jawabanToSend).length === 0) {
          setCurrentSoalIndex(index);
        } else {
          setCurrentSoalIndex(index);
          await axios.post(`${import.meta.env.VITE_SERVER}/jawaban_user/${id}`, jawabanToSend, { withCredentials: true });
        }
      }
    } catch (error) {
      console.error('Error submitting answer:', error);
    }
  };

  return (
    <div className={Styles.bodi}>
      <Navbar />
      <div className={Styles.ujianContainer}>
        <div className={Styles.soalSection}>
          {currentSoal && (
            <div>
              <h2>Soal No. {currentSoalIndex + 1}</h2>
              <div dangerouslySetInnerHTML={{ __html: currentSoal.soal || '' }} />
              {currentSoal.filesoal && (
                <img
                  src={`${import.meta.env.VITE_SERVER}/get-img/${currentSoal.filesoal}`}
                  alt={currentSoal.filesoal}
                  className={Styles.image}
                />
              )}
              <div className={Styles.jawabanContainer}>
                {['a', 'b', 'c', 'd', 'e'].map((option) => {
                  const opsiKey = `opsi_${option}`;
                  const fileKey = `file_${option}`;
                  return currentSoal[opsiKey] ? (
                    <div
                      key={option}
                      className={isSelected(opsiKey) ? Styles.jawabanItemActive : Styles.jawabanItem}
                    >
                      <input
                        className={Styles.input}
                        type="radio"
                        id={`${opsiKey}-${currentSoal.id}`}
                        name={`soal-${currentSoal.id}`}
                        value={opsiKey}
                        checked={selectedJawaban[currentSoal.id] === opsiKey}
                        onChange={() => handleJawabanChange(currentSoal.id, opsiKey)}
                      />
                      <label
                        htmlFor={`${opsiKey}-${currentSoal.id}`}
                        className={`${Styles.jawabanLabel} ${isSelected(opsiKey) ? Styles.selected : ''}`}
                      >
                        {currentSoal[opsiKey]}
                      </label>
                      {currentSoal[fileKey] && (
                        <img
                          src={`${import.meta.env.VITE_SERVER}/get-img/${currentSoal[fileKey]}`}
                          alt={fileKey}
                          className={Styles.image}
                        />
                      )}
                    </div>
                  ) : null;
                })}
              </div>
            </div>
          )}
        </div>
        <div className={Styles.navigation}>
          <button onClick={() => handleSubmit('prev')} disabled={currentSoalIndex === 0}>
            Soal Sebelumnya
          </button>
          <button onClick={() => handleSubmit('next')} disabled={currentSoalIndex === soal.length - 1}>
            Soal Selanjutnya
          </button>
          <button onClick={submitJawaban}>Kirim Jawaban</button>
        </div>
      </div>
      <Footer />
      {showConfirmModal && (
        <ConfirmModal
          message="Apakah Anda yakin ingin mengirim jawaban?"
          onConfirm={handleConfirm}
          onCancel={handleCancel}
        />
      )}
      {showModal && (
        <Modal
          isOpen={showModal}
          onClose={toggleModal}
          onSubmit={toggleModal}
        />
      )}
    </div>
  );
};

export default UjianPage;
